[{"content":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频，社区活动等\n最新动态 Kotlin 1.9.0-Beta 版本发布 Kotlin 1.9.0-Beta 版本已发布，主要包括以下内容\n持续完善 Kotlin K2 编译器，添加了对 Kotlin/Native 后端的支持 1.7.20 版本引入的..\u0026lt;操作符成为稳定 API 提供了一个新的扩展函数createParentDirectories，可用于创建带有必要父目录的新文件，如果目录已存在，则不操作，否则创建目录 Kotlin 跨平台 Gradle 插件支持配置缓存 Google 的 Android 团队将提供自己的 Gradle 插件来支持 Kotlin Multiplatform 中的 Android Target Kotlin/Native 在访问object单例的const val字段时将不再初始化object 详情可见博客文章：Kotlin1.9.0-Beta，它来了！！\n精选博客 Kotlin 中的函数式编程：探索 Monad 及其实际用例 Kotlin 是一门从一开始就支持函数式编程的语言，而 Monad 是函数式编程中的一个重要概念，本文主要介绍了 Monad 是什么，在 Kotlin 函数式编程中如何使用它们，以及一些 Monad 的实际应用案例。\nMonad 的概念看起来有些难以理解， 关于 Monad 到底是什么也可以参考灰蓝天际大佬翻译的： Kotlin 版图解 Functor、Applicative 与 Monad\n使用 ParallelGC 加快 Kotlin 编译速度，并减少内存占用 JDK 17: Using ParallelGC for the Kotlin process in Android Builds\n我们知道 Kotlin 编译过程中守护进程会占据大量的内存，这其中不可避免的会发生 GC，因此不同的垃圾回收策略也会影响 Kotlin 编译速度\n本文分别使用 G1 垃圾回收器与并行垃圾回收器编译 nowinandroid 项目，对比数据如下：\nKotlin 编译任务耗时减少了22% Kotlin 进程的垃圾回收器耗时减少了60% Kotlin进程内存使用量减少了51% 当然不同项目的测试结果可能不同，数据仅供参考。不过 Android 文档中的优化构建速度指南也推荐我们使用并发垃圾回收器，因此感兴趣的同学也可以尝试下，看看与本文的测试数据是否一致\nKotlin 编译器介绍 Crash Course on the Kotlin Compiler | K1 + K2 Frontends, Backends\n本文介绍了 Kotlin 编译的总体流程，包括 K1 和 K2 两个编译器前端的异同特点，以及编译器前端产物是如何通过 JVM、JS、Native 和 WASM 四个编译器后端，来生成相应的目标产物的。\n同时我们知道 K2 编译器前端比起 k1 编译器前端在性能上有了很大的提升，本文也介绍了 K1 编译器前端性能的主要问题在于非常糟糕的代码局部性和内存局部性。所有的descriptors都是惰性的，因此编译器总是在不同部分的代码之间跳转，从而破坏了 JIT 优化的数量。此外，解析的所有信息都存储在一个大的 Map（BindingContext）中，因此 CPU 不能充分缓存对象。\n从Kotlin中return@forEach了个寂寞 本文探讨了 Kotlin forEach 中一个容易出错的细节，在 Kotlin 语言中，return@forEach 的作用类似于 continue 而不是 break。文章解释了其背后的原理，并提供了一个相应的解决方案。\n(1..7).forEach { if (it == 3) { return@forEach // 相当于 continue 而不是 break } Log.d(\u0026#34;xys\u0026#34;, \u0026#34;Num: $it\u0026#34;) } 如何使用 Kotlin 技术栈构建一个播客网站 《Kotlin 炉边漫谈》是一个讨论 Kotlin 相关资讯的中文播客，播客网站现已上线：Kotlin 炉边漫谈官方网站\n该网站使用 Kotlin 技术栈构建，包括前端展示，后端云函数接口，数据爬虫获取与播放数据图表分析等功能。目前前端部分仍然是由 js 框架构建，后续在 Kotlin/WASM 成熟后或许可以弥补这一缺憾。同时后续也将推出 Kotlin 跨平台移动端 app，敬请期待。\n这个例子是 Kotlin 端到端解决方案的一个很好的示范，详情可见：how I make a podcast website using serverless technology in 2023\nKotlin 动态化框架 Zipline Dynamic Kotlin with Zipline\nZipline 是 Cash 公司开源的一款 Kotlin 动态化框架，借助这个框架，我们可以使用 Kotlin 编写功能和业务逻辑，并将它们动态推送给用户，免去了对应用发版的依赖。\nZipline 基于 Kotlin 跨平台构建，目前 1.0 版本是通过 Kotlin/Js 后端将 Kotlin 代码编译成 Js 代码，Js 代码发送到端上后通过 QuickJs 引擎执行。需要注意的是，编译成 Js 代码仅是 Zipline 内部的一个实现细节，因此在后续的迭代中可以方便地替换，在 Zipline 2.0 中将会切换到 WebAssembly。\nZipline 不仅可以动态更新业务逻辑，通过与 Compose 跨平台框架 Redwood 结合，也可以实现动态更新 UI，详情可见 Jake Wharton 大神在 KotlinConf 上的分享： Playing in the Treehouse with Redwood and Zipline\nRedwood + Zipline = Treehouse = \u0026ldquo;支持动态化的 Compose 跨平台方案\u0026rdquo;。这套方案解决了 Kotlin UI 跨平台及动态化两个关键问题，具有很大的想象空间和应用潜力。\n精选视频 Compose 跨平台快速上手 Build Your First Compose Multiplatform App (KMM)：Philipp Lackner 是一位在 YouTube 上非常活跃的讲师，主要分享 Kotlin 与 Android 相关的教程。在此视频中，他详细介绍了如何逐步创建一个 Compose 跨平台项目，实现在 Android 和 iOS 平台上共享 UI。\nKotlin 编译成 WebAssembly Kotlin goes WebAssembly!：Kotlin 1.8.20 引入了新的编译后端：WebAssembly，Kotlin 代码通过编译成 WebAssembly ，可以运行在浏览器，Node.js 等环境中。本视频主要介绍了 Wasm 是什么，Kotlin Wasm 的现状与示例，以及其在未来的展望\nCompose 渲染机制的秘密 Compose 渲染机制的秘密：这是由上海 Kotlin 用户组组织者带来的一场精彩分享。在本视频中，您将了解到 Jetpack Compose 是如何在屏幕上绘制的，同时还会介绍 Skia 引擎与 OpenGL ES、Vulkan 等图形 API 之间的关系以及 Compose-Multiplatform 在各个平台上的渲染方式。\n","permalink":"https://beijing-kug.github.io/news/kotlin-news-2023-06/","summary":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频，社区活动等\n最新动态 Kotlin 1.9.0-Beta 版本发布 Kotlin 1.9.0-Beta 版本已发布，主要包括以下内容\n持续完善 Kotlin K2 编译器，添加了对 Kotlin/Native 后端的支持 1.7.20 版本引入的..\u0026lt;操作符成为稳定 API 提供了一个新的扩展函数createParentDirectories，可用于创建带有必要父目录的新文件，如果目录已存在，则不操作，否则创建目录 Kotlin 跨平台 Gradle 插件支持配置缓存 Google 的 Android 团队将提供自己的 Gradle 插件来支持 Kotlin Multiplatform 中的 Android Target Kotlin/Native 在访问object单例的const val字段时将不再初始化object 详情可见博客文章：Kotlin1.9.0-Beta，它来了！！\n精选博客 Kotlin 中的函数式编程：探索 Monad 及其实际用例 Kotlin 是一门从一开始就支持函数式编程的语言，而 Monad 是函数式编程中的一个重要概念，本文主要介绍了 Monad 是什么，在 Kotlin 函数式编程中如何使用它们，以及一些 Monad 的实际应用案例。\nMonad 的概念看起来有些难以理解， 关于 Monad 到底是什么也可以参考灰蓝天际大佬翻译的： Kotlin 版图解 Functor、Applicative 与 Monad\n使用 ParallelGC 加快 Kotlin 编译速度，并减少内存占用 JDK 17: Using ParallelGC for the Kotlin process in Android Builds","title":"Kotlin 技术月报 | 2023 年 6 月"},{"content":"最近举办的 KotlinConf 与 Google I/O 上都有不少 Kotlin 技术的分享，同时最近一个月各地的 Kotlin 组织也举办了不少活动\n为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频，社区活动等\n最新动态 KotlinConf 2023 回放来了 KotlinConf 2023 的所有回放已出，所有回放列表可见：https://kotlinconf.com/talks/\n本次大会除了开场与闭幕讨论，共有 69 场分享，可以说是一场盛宴了，我整理统计了一下各个分享的主题\n主题 分享数 Kotlin 跨平台 21 Compose 相关分享 10 Kotlin 在服务端的应用 9 Kotlin 协程相关分享 8 Kotlin 编译器与编译器插件 8 Kotlin 与测试 4 Kotlin 语言特性相关分享 4 Kotlin 与函数式编程 3 Kotlin 用于数据科学 2 Kotlin 与游戏 2 Kotlin 与 Gradle 1 Kotlin 与 AI 1 从各个主题的分享数量也可以看出 Kotlin 在各个方向的火热程度\nKotlin 跨平台相关分享是最多的，可以看出这也是 Kotlin 团队下一步要重点发展的方向 越来越多的人开始使用 Compose ，据统计，在 top 1000 的 Android 应用中，有 21% 的应用使用了 Jetpack Compose 虽然据统计大约 66% 的 Kotlin 开发者是 Android 开发者，但服务端开发者使用 Kotlin 的比例也在逐渐上升，这应该也是 Kotlin 团队想要发力的方向 这次大会 Kotlin 编译器与编译器插件相关的分享也比较多，应该是因为 K2 编译器的逐渐成熟，即将发布 beta 版本 国外很多团队重视代码测试，而不仅仅是需求开发，因此 Kotlin 在测试方面的分享也较多 Google I/O : Android 版 Kotlin 的新动态 What\u0026rsquo;s new in Kotlin for Android：在本次 Google I/O 大会上，介绍了今年将为 Android 开发者发布的 Kotlin 更新，主要包括\n即将推出的 K2 编译器 KTS 成为 Gradle 构建默认设置 Kotlin 符号处理 (Kotlin Symbol Processing) 的改进 Kotlin 跨平台的一些新动态 这其中我最关注的是 K2 编译器的新动态，K2 编译器最显著的改进是编译速度的大幅提升，同时稳定的编译器插件 API 也可以降低 Kotlin 编译器插件的开发成本\n在 Kotlin 1.8.20 中，已经可以通过设置languageVersion = \u0026quot;2.0\u0026quot;来开启 K2 了，而 K2 编译器也将在 Kotlin 1.9.x 中 Beta，并最终在 Kotlin 2.0 版本中稳定\nKotlin 1.9.0-Beta 发布 What\u0026rsquo;s new in Kotlin 1.9.0-Beta：Kotlin 1.9.0 Beta 版本终于发布，主要包括以下内容\n持续完善 Kotlin K2 编译器，添加了对 Kotlin/Native 后端的支持 1.7.20 版本引入的..\u0026lt;操作符成为稳定 API 提供了一个新的扩展函数createParentDirectories，可用于创建带有必要父目录的新文件，如果目录已存在，则不操作，否则创建目录 Kotlin 跨平台 Gradle 插件支持配置缓存 Google 的 Android 团队将提供自己的 Gradle 插件来支持 Kotlin Multiplatform 中的 Android Target Kotlin/Native 在访问object单例的const val字段时将不再初始化object Kotlin 协程 1.7.0 发布 https://github.com/Kotlin/kotlinx.coroutines/releases：在我看来，主要变动在于\n不再支持老版本的 Kotlin/Native 内存模型 Kotlin/Native 版协程终于添加了 Dispatchers.IO 支持 精选博客 Kotlin 成为 Gradle 默认语言！如何快速上手？KOGE 小册来帮忙！ 在使用 groovy 开发构建脚本时，大家肯定碰到过代码自动补全，类型检查等痛点问题，而使用 Kotlin DSL 开发脚本可以完美解决这些问题\n在本次 KotlinConf 上已经宣布，Kotlin DSL 现在成为新 Gradle 构建的默认设置。如果你想学习 Gradle，而苦于对 groovy 的语法并不熟悉，那么 KOGE 是你的好帮手\nKOGE 是 Kotlin-oriented Gradle Essentials 的缩写，顾名思义是面向 Kotlin 的 Gradle 基础手册。我们按照合理的先后顺序，列出新手最困惑的概念，再从一些互联网上已有的问题、源码、示例项目中去学习。它不是 “Awesome Gradle” 的项目收藏夹，而是一份大纲，一本简练的自学手册。 手册选择了 Kotlin 作为介绍 DSL 脚本和插件开发的语言，链接和用例以 Android 构建场景为主。\nKotlin 跨平台系列文章 Kotlin 跨平台系列文章，分享了 Kotlin 跨平台在各端的使用实践，包括以下内容：\nKMM跨平台开发入门，看这一篇就够了~ Compose跨平台第一弹：体验Compose for Desktop Compose跨平台第二弹：体验Compose for Web 一文先行体验使用Compose开发iOS～ Kotlin跨平台第四弹：了解Kotlin/Wasm 我开源了一个Compose跨平台项目模版 落地包体积监控，用Kotlin写一个APK差异分析CLI CLI 即 command-line interface (命令行界面)，我们在开发中常常会写一些 CLI 工具，本文即是一个使用 Kotlin 实现 APK 差异分析 CLI 的很好示例\n当然有人会问，开发 CLI 我为什么不使用 python 呢？使用 Kotlin 开发 CLI 的最大优势在于，如果你比较熟悉 Kotlin 的话，可以更快的实现功能，也可以写出更好的代码，而不是使用一个你可能不那么熟悉的语言。\n因此使用 Kotlin 开发 CLI 是在你已经掌握 Kotlin 之后提供的一个选项，大家可根据自己的情况选用\nKotlin Unit 与 Nothing 详解 Unit 为啥还能当函数参数？面向实用的 Kotlin Unit 详解 这玩意真的有用吗？对，是的！Kotlin 的 Nothing 详解 Kotlin 的 Unit 与 Nothing 类型，其实我们每天都在使用。我们知道，Unit 表示没有返回值，Nothing 则是所有类型的子类型，但是它们的本质是什么，又为什么这么设计呢？上面两篇文章就解答了这些问题，讲解的很细致，通俗易懂\n精选视频 Compose iOS 发布 alpha 版本 Compose Multiplatform on iOS by: Sebastian Aigner and Nikita Lipsky：KotlinConf 大会上关于 Compose iOS 的分享，非常精彩，主要包括以下内容：\nCompose Multiplatform for iOS Demo 现场演示，效果看起来已经很不错了 基于 Jetpack Compose 构建，与 Jetpack Compose 的 API 相同，因此可以快速将 Jetpack Compose 项目扩展成 Compose 跨平台项目 基于 Kotlin 跨平台构建，因此可以使用相同的机制访问平台特异的 API 允许与原生用户界面的双向互操作：可以在 Compose UI 中嵌入复杂的原生视图，例如MKMapView，或者在 SwiftUI 中嵌入 Compose 代码 介绍了 Compose Multiplatform for iOS 的架构与原理，以及其目前在功能与性能上待完善的部分 Kotlin 炉边漫谈第 8 期 《Kotlin 炉边漫谈》第 8 期：阿里和美团的 Kotlin Multiplatform 应用案例 | 播客\n由来自阿里巴巴的曹立成和美团的刘银龙两位嘉宾，跟大家一起分享 Kotlin Multiplatform 的落地实践经验\n横向对比了 Flutter, Kotlin Multiplatform, React Native, 以及国内大厂自研跨平台框架等的优缺点及应用场景，同时分享了在做技术选型时的经验分享，非常精彩，不容错过\nK2 编译器编译速度实测 Kotlin 新编译器 K2 到底有多快？：K2 编译器一直号称可以大幅提升编译速度，那么到底提升了多少？现在我们是否可以开始使用 K2 了呢？\n本视频实测了 K2 的编译提速效果，发现 K2 编译器并没有吹牛，测试结果如下图所示：\n社区活动 KotlinConf Global KotlinConf Global 是 KotlinConf 在全球各个城市的拓展延伸活动，促进各地 Kotlin 开发人员之间的联系，最近全国各个城市也举办了相关活动\n上海线下活动｜2023 KotlinConf Global Shanghai Meetup 期待与您见面 活动回顾 | 2023 KotlinConf Global 北京分享会 深圳 KotlinConf Global 2023 西安线下活动｜2023 KotlinConf Global Xi’an Meetup 期待与您见面 新成立的 Kotlin User Group 最近全国各个城市也新创建了一些 KUG，欢迎各个城市的 Kotlin 爱好者加入\n贵州 Kotlin 用户组 郑州 Kotlin 用户组 ","permalink":"https://beijing-kug.github.io/news/kotlin-news-2023-05/","summary":"最近举办的 KotlinConf 与 Google I/O 上都有不少 Kotlin 技术的分享，同时最近一个月各地的 Kotlin 组织也举办了不少活动\n为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频，社区活动等\n最新动态 KotlinConf 2023 回放来了 KotlinConf 2023 的所有回放已出，所有回放列表可见：https://kotlinconf.com/talks/\n本次大会除了开场与闭幕讨论，共有 69 场分享，可以说是一场盛宴了，我整理统计了一下各个分享的主题\n主题 分享数 Kotlin 跨平台 21 Compose 相关分享 10 Kotlin 在服务端的应用 9 Kotlin 协程相关分享 8 Kotlin 编译器与编译器插件 8 Kotlin 与测试 4 Kotlin 语言特性相关分享 4 Kotlin 与函数式编程 3 Kotlin 用于数据科学 2 Kotlin 与游戏 2 Kotlin 与 Gradle 1 Kotlin 与 AI 1 从各个主题的分享数量也可以看出 Kotlin 在各个方向的火热程度\nKotlin 跨平台相关分享是最多的，可以看出这也是 Kotlin 团队下一步要重点发展的方向 越来越多的人开始使用 Compose ，据统计，在 top 1000 的 Android 应用中，有 21% 的应用使用了 Jetpack Compose 虽然据统计大约 66% 的 Kotlin 开发者是 Android 开发者，但服务端开发者使用 Kotlin 的比例也在逐渐上升，这应该也是 Kotlin 团队想要发力的方向 这次大会 Kotlin 编译器与编译器插件相关的分享也比较多，应该是因为 K2 编译器的逐渐成熟，即将发布 beta 版本 国外很多团队重视代码测试，而不仅仅是需求开发，因此 Kotlin 在测试方面的分享也较多 Google I/O : Android 版 Kotlin 的新动态 What\u0026rsquo;s new in Kotlin for Android：在本次 Google I/O 大会上，介绍了今年将为 Android 开发者发布的 Kotlin 更新，主要包括","title":"Kotlin 技术月报 | 2023 年 5 月"},{"content":"2023 KotlinConf Global 北京分享会结束了，感谢所有参与其中的讲师、参会者、工作人员。\n我们将讲师的演讲视频与讲义发布在 B 站与谷歌 drive ，方便大家回顾\n演讲回看 活动开场 你想知道的 Jetpack Compose 的编译器黑魔法 Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，它一经推出便受到了广大开发者的密切关注。Compose 的设计实现将 Kotlin 的 DSL 能力发挥到了极致，其中基于 Kotlin 编译器插件实现的编译时代码检查和变换发挥了巨大的作用。这次分享我们将对 Jetpack Compose 的编译器插件源码进行简要剖析，在了解 Compose 的工作机制的同时也能深入理解编译器插件的适用场景。\n《你想知道的 Jetpack Compose 的编译器黑魔法》 PPT 链接\nCompose 到底能玩出什么花？ Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，无独有偶，Jetbrains 也推出了新一代的声明式 UI 开发框架: “Compose”，没错，名称都一样，并且使用方式也基本一致。本次分享会带大家看一看 Jetbrains 的 Compose 有什么厉害之处，并且能为我们安卓开发工程师的竞争力带来哪些提升。\n《Compose 到底能玩出什么花？》 PPT 链接\nKMM 跨平台原理及实践 Jetbrains Compose 为什么可以跨平台？这离不开 Kotlin Multiplatform （KMP）技术，它是 Kotlin 官方提供的一套跨平台解决方案，通过编译器将 Kotlin 源码编译为各平台目标代码或机器码。本次分享主要介绍 KMP 跨平台原理，以及 Kotlin Multiplatform Mobile（KMM）在移动端的落地实践，并结合本次官方 KotlinConf 大会的最新进展探讨未来更广的发展前景。\n《KMM 跨平台原理及实践》PPT 链接\n精彩瞬间 ","permalink":"https://beijing-kug.github.io/events/kotlinconf-callback/","summary":"2023 KotlinConf Global 北京分享会结束了，感谢所有参与其中的讲师、参会者、工作人员。\n我们将讲师的演讲视频与讲义发布在 B 站与谷歌 drive ，方便大家回顾\n演讲回看 活动开场 你想知道的 Jetpack Compose 的编译器黑魔法 Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，它一经推出便受到了广大开发者的密切关注。Compose 的设计实现将 Kotlin 的 DSL 能力发挥到了极致，其中基于 Kotlin 编译器插件实现的编译时代码检查和变换发挥了巨大的作用。这次分享我们将对 Jetpack Compose 的编译器插件源码进行简要剖析，在了解 Compose 的工作机制的同时也能深入理解编译器插件的适用场景。\n《你想知道的 Jetpack Compose 的编译器黑魔法》 PPT 链接\nCompose 到底能玩出什么花？ Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，无独有偶，Jetbrains 也推出了新一代的声明式 UI 开发框架: “Compose”，没错，名称都一样，并且使用方式也基本一致。本次分享会带大家看一看 Jetbrains 的 Compose 有什么厉害之处，并且能为我们安卓开发工程师的竞争力带来哪些提升。\n《Compose 到底能玩出什么花？》 PPT 链接\nKMM 跨平台原理及实践 Jetbrains Compose 为什么可以跨平台？这离不开 Kotlin Multiplatform （KMP）技术，它是 Kotlin 官方提供的一套跨平台解决方案，通过编译器将 Kotlin 源码编译为各平台目标代码或机器码。本次分享主要介绍 KMP 跨平台原理，以及 Kotlin Multiplatform Mobile（KMM）在移动端的落地实践，并结合本次官方 KotlinConf 大会的最新进展探讨未来更广的发展前景。","title":"活动回顾 | 2023 KotlinConf Global 北京分享会"},{"content":"5月13日，北京 Kotlin 用户组将举办首次线下聚会，欢迎您的到来。\n这场活动是 KotlinConf Global 活动的一部分，我们邀请了三位嘉宾来分享他们在 Kotlin 元编程、Compose 跨平台以及 Kotlin Multiplatform 等方面的实践经验。\n大家可以在现场与各位 Kotlin 技术爱好者一起交流讨论，线下面基，点击报名链接或者扫描文末二维码即可报名\n活动简介 经过三年的疫情最困难时期，JetBrains 官方举办的 KotlinConf 大会于今年 4 月中旬在荷兰阿姆斯特丹再次回归。此次大会上，Kotlin 团队的开发人员介绍了 Kotlin 的未来发展方向和重要更新，同时来自世界各地的开发人员也分享了 Kotlin 在各个领域的先进实践经验。\n鉴于许多开发人员无法亲身参加现场活动，JetBrains 官方在全球范围内发起了 KotlinConf Global 活动，由 JetBrains 注册的 Kotlin User Group（KUG）在当地举办，旨在促进本地 Kotlin 开发人员之间的联系，提高技术水平。\n本次活动是 KotlinConf Global 活动的一部分，同时也是北京 Kotlin 用户组的首次线下活动，期待您的参加\n精彩内容 《你想知道的 Jetpack Compose 的编译器黑魔法》 讲师简介：霍丙乾 bennyhuo，Google 开发者专家（Kotlin 方向）；《深入理解 Kotlin 协程》 作者；先后就职于腾讯、猿辅导。\n内容简介：Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，它一经推出便受到了广大开发者的密切关注。Compose 的设计实现将 Kotlin 的 DSL 能力发挥到了极致，其中基于 Kotlin 编译器插件实现的编译时代码检查和变换发挥了巨大的作用。这次分享我们将对 Jetpack Compose 的编译器插件源码进行简要剖析，在了解 Compose 的工作机制的同时也能深入理解编译器插件的适用场景。\n《Compose 到底能玩出什么花？》 讲师简介：朱江，《Jetpack Compose：Android全新UI编程》作者；CSDN 博客专家、掘金优秀创作者；现在联想（北京）有限公司担任 Android 开发工程师。\n内容简介：正如霍丙乾大佬所说，Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架；无独有偶，Jetbrains 也推出了新一代的声明式 UI 开发框架: “Compose”，没错，名称都一样，并且使用方式也基本一致。本次分享会带大家看一看 Jetbrains 的 Compose 有什么厉害之处，并且能为我们安卓开发工程师的竞争力带来哪些提升。\n《KMM 跨平台原理及实践》 讲师简介：刘银龙，美团移动端开发工程师，GMTC 讲师。\n内容简介：Jetbrains Compose 为什么可以跨平台？这离不开 Kotlin Multiplatform （KMP）技术，它是 Kotlin 官方提供的一套跨平台解决方案，通过编译器将 Kotlin 源码编译为各平台目标代码或机器码。本次分享主要介绍 KMP 跨平台原理，以及 Kotlin Multiplatform Mobile（KMM）在移动端的落地实践，并结合本次官方 KotlinConf 大会的最新进展探讨未来更广的发展前景。\n时间地点 时间：2023 年 5 月 13 日，14:00 - 17:00 地点：北京市朝阳区望京SOHO T2C座（在 1 楼抵达即可，组织者会带领大家上去） 报名方式 我们非常欢迎您报名成为观众，并与我们一同聆听他人的分享、参与热烈的技术探讨。观众报名对我们而言非常重要，因为我们需要根据观众人数申请合适的活动场地、准备活动奖品，并采购零食和饮料等。因此如果您有意参加的话，请您填写下方的观众报名表。\n报名链接：2023 KotlinConf Global 北京分享会线下观众报名表\n扫码报名：\n组织者联系方式 如果您决定报名参加活动，请添加组织者的微信号，以便在活动当日前往正确的地点。如果您有任何疑问或需要帮助，请随时联系组织者：\n微信号：RicardoJiang2022 公众号：关注微信公众号“程序员江同学”，点击技术讨论 ","permalink":"https://beijing-kug.github.io/events/kotlinconf/","summary":"5月13日，北京 Kotlin 用户组将举办首次线下聚会，欢迎您的到来。\n这场活动是 KotlinConf Global 活动的一部分，我们邀请了三位嘉宾来分享他们在 Kotlin 元编程、Compose 跨平台以及 Kotlin Multiplatform 等方面的实践经验。\n大家可以在现场与各位 Kotlin 技术爱好者一起交流讨论，线下面基，点击报名链接或者扫描文末二维码即可报名\n活动简介 经过三年的疫情最困难时期，JetBrains 官方举办的 KotlinConf 大会于今年 4 月中旬在荷兰阿姆斯特丹再次回归。此次大会上，Kotlin 团队的开发人员介绍了 Kotlin 的未来发展方向和重要更新，同时来自世界各地的开发人员也分享了 Kotlin 在各个领域的先进实践经验。\n鉴于许多开发人员无法亲身参加现场活动，JetBrains 官方在全球范围内发起了 KotlinConf Global 活动，由 JetBrains 注册的 Kotlin User Group（KUG）在当地举办，旨在促进本地 Kotlin 开发人员之间的联系，提高技术水平。\n本次活动是 KotlinConf Global 活动的一部分，同时也是北京 Kotlin 用户组的首次线下活动，期待您的参加\n精彩内容 《你想知道的 Jetpack Compose 的编译器黑魔法》 讲师简介：霍丙乾 bennyhuo，Google 开发者专家（Kotlin 方向）；《深入理解 Kotlin 协程》 作者；先后就职于腾讯、猿辅导。\n内容简介：Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，它一经推出便受到了广大开发者的密切关注。Compose 的设计实现将 Kotlin 的 DSL 能力发挥到了极致，其中基于 Kotlin 编译器插件实现的编译时代码检查和变换发挥了巨大的作用。这次分享我们将对 Jetpack Compose 的编译器插件源码进行简要剖析，在了解 Compose 的工作机制的同时也能深入理解编译器插件的适用场景。","title":"线下活动 | 2023 KotlinConf Global 北京分享会"},{"content":"kotlin-android-extensions 框架已经过时了很久，并且将在 Kotlin 1.8 中被正式移除。\n对于新代码，我们可以使用 ViewBinding 等方式替换，但是大量存量代码的迁移，对于开发者来说不是一个轻松的工作。\n为此，看云控股技术团队开源了 Kace 框架, 帮助开发者实现 kotlin-android-extensions 插件的无缝迁移。\n开源地址：https://github.com/kanyun-inc/Kace\n","permalink":"https://beijing-kug.github.io/events/kace/","summary":"kotlin-android-extensions 框架已经过时了很久，并且将在 Kotlin 1.8 中被正式移除。\n对于新代码，我们可以使用 ViewBinding 等方式替换，但是大量存量代码的迁移，对于开发者来说不是一个轻松的工作。\n为此，看云控股技术团队开源了 Kace 框架, 帮助开发者实现 kotlin-android-extensions 插件的无缝迁移。\n开源地址：https://github.com/kanyun-inc/Kace","title":"KAE将被正式移除，如何无缝迁移？"},{"content":"Kotlin 协程 破解 Kotlin 协程专栏 Kotlin 协程视频教程 KMM (Kotlin Multiplatform Mobile) KMM 环境搭建及入门教程 KMM 视频分享教程 Kotlin 元编程 Kotlin 元编程GDG社区分享视频 Kotlin 注解处理器视频教程 别了 KAPT , 使用 KSP 快速实现 ButterKnife Kotlin 更新 Kotlin 1.5 有哪些新内容？ Kotlin 1.6 有哪些新内容？ Kotlin 1.7 有哪些新内容？ ","permalink":"https://beijing-kug.github.io/advanced/","summary":"Kotlin 协程 破解 Kotlin 协程专栏 Kotlin 协程视频教程 KMM (Kotlin Multiplatform Mobile) KMM 环境搭建及入门教程 KMM 视频分享教程 Kotlin 元编程 Kotlin 元编程GDG社区分享视频 Kotlin 注解处理器视频教程 别了 KAPT , 使用 KSP 快速实现 ButterKnife Kotlin 更新 Kotlin 1.5 有哪些新内容？ Kotlin 1.6 有哪些新内容？ Kotlin 1.7 有哪些新内容？ ","title":"Kotlin 进阶学习材料"},{"content":"","permalink":"https://beijing-kug.github.io/events/","summary":"events","title":"Events"},{"content":"","permalink":"https://beijing-kug.github.io/news/","summary":"news","title":"News"}]