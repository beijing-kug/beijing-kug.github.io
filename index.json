[{"content":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kudos 发布 https://github.com/kanyun-inc/Kudos\nKudos 是 Kotlin utilities for deserializing objects 的缩写。它可以解决使用 Gson、Jackson 等框架反序列化 JSON 到 Kotlin 类时所存在的空安全问题和构造器默认值失效的问题。\n在使用常见的 JSON 序列化框架解析 JSON 时，Kotlin 开发者通常会面临无参构造器和属性空安全的问题。我们通常的建议是使用 Moshi 或者 kotlinx.serialization。\n不过，切换框架往往并不容易。kotlinx.serialization 不支持 Java，适合纯 Kotlin 项目使用；Moshi 虽然也同时支持 Java，但它在解析时与 Gson 这样的框架在细节上仍然有不少差异。\n有没有什么办法为 Gson 这样的框架提供类型空安全和支持主构造器的参数默认值的能力呢？答案就是 Kudos。\n精选博客 Kotlin版本升级到1.9.0，需要做这些事\u0026hellip; 本文记录了通用项目工程Kotlin版本由1.7升级到1.9版本的适配要点，落实到具体的项目工程需要具体处理其中的细节问题，具体包括以下内容：\nKAE 插件正式废弃，迁移到 ViewBinding KAPT 默认启用 JVM IR，当前需要关闭 外部枚举类external enum已弃用，新业务请使用外部密封类 external sealed 今日好奇：ChatGPT的Android端是用什么写的？ Kotlin的语法糖到底有多甜？ 精选视频 ","permalink":"https://beijing-kug.github.io/news/kotlin-news-2023-10/","summary":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kudos 发布 https://github.com/kanyun-inc/Kudos\nKudos 是 Kotlin utilities for deserializing objects 的缩写。它可以解决使用 Gson、Jackson 等框架反序列化 JSON 到 Kotlin 类时所存在的空安全问题和构造器默认值失效的问题。\n在使用常见的 JSON 序列化框架解析 JSON 时，Kotlin 开发者通常会面临无参构造器和属性空安全的问题。我们通常的建议是使用 Moshi 或者 kotlinx.serialization。\n不过，切换框架往往并不容易。kotlinx.serialization 不支持 Java，适合纯 Kotlin 项目使用；Moshi 虽然也同时支持 Java，但它在解析时与 Gson 这样的框架在细节上仍然有不少差异。\n有没有什么办法为 Gson 这样的框架提供类型空安全和支持主构造器的参数默认值的能力呢？答案就是 Kudos。\n精选博客 Kotlin版本升级到1.9.0，需要做这些事\u0026hellip; 本文记录了通用项目工程Kotlin版本由1.7升级到1.9版本的适配要点，落实到具体的项目工程需要具体处理其中的细节问题，具体包括以下内容：\nKAE 插件正式废弃，迁移到 ViewBinding KAPT 默认启用 JVM IR，当前需要关闭 外部枚举类external enum已弃用，新业务请使用外部密封类 external sealed 今日好奇：ChatGPT的Android端是用什么写的？ Kotlin的语法糖到底有多甜？ 精选视频 ","title":"Kotlin 技术月报 | 2023 年 10 月"},{"content":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kotlin 1.9.20-Beta 发布 What\u0026rsquo;s new in Kotlin 1.9.20-Beta\nKotlin 1.9.20-Beta 版本已发布，具体包括以下内容：\n全新的 Kotlin 多平台项目模板，减少配置中的重复代码 Kotlin 多平台插件添加了对 Gradle 配置缓存的完全支持 Kotlin/Native 默认使用新版内存分配器 Kotlin/Native 垃圾回收性能持续提升 添加了全新的 wasm-wasi 目标，并将原有的 wasm 目标重命名为 wasm-js 标准库添加了对 WASI API 的支持 Dagger/Hilt 支持 KSP https://github.com/google/dagger/releases\nDagger 2.48 版本发布，提供了对 Dagger 和 Hilt KSP 处理器的支持。\n为了使用 Dagger 的 KSP 处理器，主要需要完成以下工作：\n按照基本设置，将 Dagger 的处理器从 kapt 迁移到 ksp。 将任何 Dagger SPI 插件迁移到新的 Dagger SPI 插件 API。 确保没有 Kapt 处理器生成需要与 Dagger 交互的类。 需要注意的是，Dagger 的 KSP 处理器仍处于 alpha 阶段，官方目前主要关注的是确保正确性而不是优化性能，在使用的过程中有任何问题都可及时向官方反馈\nTouchLab 开源 SKIE 项目 SKIE is Open Source\nSKIE 是 TouchLab 开源的 Kotlin 多平台桥接 Swift API 的工具，通过该工具，可以生成 Swift 友好的 API.\nSKIE 通过为 Kotlin 编译器创建的 Objective-C 头文件生成 Swift 包装器来提高 Kotlin 和 Swift 之间的互操作性。它重新创建了两种语言都支持的功能，这些功能在从 Kotlin 到 Objective-C 再到 Swift 的转换中丢失了，例如：\n详尽的密封类和真正的 Swift 枚举。 默认参数 无缝的suspend函数与flow ktlint 发布 1.0.0 版本 https://github.com/pinterest/ktlint/releases/tag/1.0.0\nktlint 是被广泛使用的 Kotlin lint 库，终于发布了 1.0.0 版本，其中包含新功能和一些重大更改，详情可见以上链接。\nJetpack Paging 支持 Kotlin 跨平台 https://developer.android.com/jetpack/androidx/releases/paging#3.3.0-alpha02\nJetpack Paging 3.3.0-alpha02 版本添加了对 Kotlin 跨平台的支持，目前已支持 android, Jvm, iOS, macOS, linux 平台。这在很大程度上要归功于此前 CashApp 开源的 multiplatform-paging 项目的上游工作。\nPaging 库也成为继 Annotations, Collections, DataStore 之后又一个支持 KMP 的 Jetpack 库。\nKotlin 重返 TIOBE 指数前 20 位 September Headline: Kotlin reenters the TIOBE index top 20\n在 2023 年 9 月，Kotlin 再次挺进了 TIOBE 指数前 20 位，此前 Kotlin 在 2017 年 Google/IO 大会上被宣布为 Android 开发的一级语言时也曾达到过这一排名。经过 6 年的发展，Kotlin 建立起了一个稳定的社区，逐渐崛起并赢得了大批的忠实拥趸。\n对于此次 Kotlin 再次杀进 Top 20，TIOBE 首席执行官 Paul Jansen 认为 Kotlin 这次的崛起可能会更有力，因为其用户群体经过这 6 年早已不是 2017 年的规模了。\n精选博客 Java切换到Kotlin，Crash率上升了？ 众所周知，Kotlin 相比 Java 的一大优势便是空安全，因此从 Java 切换到 Kotlin 理论上稳定性将有所提升。\n不过本文作者在将一个 Java 老项目使用 Kotlin 重构上线后却发现 Crash 率有所上升。而大部分 Crash 发生在 Java 调用 Kotlin 的函数里，本文分析了具体的 Crash 场景以及一些规避方式。\n架构级别的 Kotlin linter: Konsist，了解一下 Refactoring Multi-Module Kotlin Project With Konsist\n或许你早就知道文件级别的 Kotlin linter，例如 Ktlint，Detekt，它们可以检测出文件中的代码风格，命名规范，代码复杂度，代码坏味道等问题。\n而 Konsist 则是架构级别的 Kotlin linter，想象一下你有如下代码检查需求：\n每个 ViewModel 的子类文件名必须以 ViewModel结尾 @Repository注解的类必须存放在..repository..包名下 presentation层的类(存放在presentation包名下)只能访问domain层的类(存放在doomain包名下) 每个UseCase类的构造函数参数都按字母顺序排列 总得来说，Konsist 解决的就是这类问题，通过这种方式可以提升架构中各个层级代码结构的规范性和统一性。\n本文介绍了如何使用 Konsist 重构一个多模块 Kotlin 项目，如何让写在不同模块的同一层级的代码，遵循同一规范与风格。\n使用 Kotlin 高级特性与技巧写出更好的代码 Getting Better with Kotlin — Exploring Advanced Features and Effective Coding Strategies\nKotlin 不仅提供了简洁的语法和与 Java 的无缝交互性，还拥有一系列高级功能，能够提升编码体验。本文介绍了 Kotlin 的一些高级特性与实用技巧。\nInline Classes: 更加紧凑的抽象 Type Aliases: 增强可读性 Sealed Classes: Kotlin 版枚举 属性代理：更加优雅的管理属性读写 带有 Lambda 的 DSL: 构建用于特定于领域的语言 运算符重载: 添加个人风格 通过 Kotlin 协程轻松实现连续依次弹窗需求 如何通过Kotlin协程, 简化\u0026quot;连续依次弹窗(Dialog队列)\u0026ldquo;的需求\n有时我们会有连续依次弹窗的需求，即上一个弹窗关闭后再弹出下一个弹窗，这种需求如果使用回调来做很容易陷入回调地狱，利用 Kotlin 协程可以轻松实现类似的需求\nlifecycleScope.launch { showDialog(\u0026#34;签到活动\u0026#34;, \u0026#34;签到领10000币\u0026#34;) // 直到dialog被关闭, 才会继续运行下一行 showDialog(\u0026#34;新手任务\u0026#34;, \u0026#34;做任务领20000币\u0026#34;) // 直到dialog被关闭, 才会继续运行下一行 showDialog(\u0026#34;首充奖励\u0026#34;, \u0026#34;首充6元送神装\u0026#34;) } suspend fun showDialog(title: String, content: String) = suspendCancellableCoroutine { continuation -\u0026gt; MaterialAlertDialogBuilder(this) .setTitle(title) .setMessage(content) .setPositiveButton(\u0026#34;我知道了\u0026#34;) { dialog, which -\u0026gt; dialog.dismiss() } .setOnDismissListener { continuation.resume(Unit) } .show() } 从服务端到客户端，一次 Ktor 的跨端实践 经常使用 Kotlin 写项目的人应该都对 Ktor 这个框架不陌生，它严格意义上不仅仅是个网络框架，而是一个可以创建异步，高性能和轻量级的 Web 服务的框架，简单的来说它既能写服务端也能写客户端。本文介绍了如何一步步使用 Ktor 来写服务端代码，并在客户端使用 Ktor 对它发起网络请求，具体包括以下内容\n服务端如何创建 Ktor 项目 服务端 Ktor 项目结构介绍 使用 Ktor 开发第一个接口 客户端使用 Ktor 请求接口 总得来说，使用 ktor 可以同时进行服务端与客户端的开发，给个人 Kotlin 开发者提供了一种全栈的技术方案\n精选视频 使用 Kotlin 练习算法技巧 Practice Technical Interview Algorithms in Kotlin\n在 IDEA 或者 Android Studio 上安装Jetbrains Academy插件后就可以打开Algorithmic Challenges in Kotlin课程，然后就可以体验在 IDEA 上使用 Kotlin 写算法题。\n该课程可以帮助参与者为编码面试做好准备，并提供对算法技术的扎实理解。\n📚 掌握 30 多种算法，包括暴力算法、贪心算法、分而治之和动态规划等内容。 🧑‍💻 直接在 JetBrains IDE 中练习，方便调试。解决一系列精心挑选的编码挑战，涵盖算法面试中最流行的主题。 💪 使用 Kotlin（一种现代多平台编程语言）实现您的解决方案。 Android 深入理解协程 Android 深入理解协程 BaguTree周六茶话\nKotlin 协程在 Android 中的应用非常广泛，本视频主要从协程解决了什么问题，协程的关键角色剖析，结合源码解析协程常见问题等角度深入介绍了协程的使用与原理\n","permalink":"https://beijing-kug.github.io/news/kotlin-news-2023-09/","summary":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kotlin 1.9.20-Beta 发布 What\u0026rsquo;s new in Kotlin 1.9.20-Beta\nKotlin 1.9.20-Beta 版本已发布，具体包括以下内容：\n全新的 Kotlin 多平台项目模板，减少配置中的重复代码 Kotlin 多平台插件添加了对 Gradle 配置缓存的完全支持 Kotlin/Native 默认使用新版内存分配器 Kotlin/Native 垃圾回收性能持续提升 添加了全新的 wasm-wasi 目标，并将原有的 wasm 目标重命名为 wasm-js 标准库添加了对 WASI API 的支持 Dagger/Hilt 支持 KSP https://github.com/google/dagger/releases\nDagger 2.48 版本发布，提供了对 Dagger 和 Hilt KSP 处理器的支持。\n为了使用 Dagger 的 KSP 处理器，主要需要完成以下工作：\n按照基本设置，将 Dagger 的处理器从 kapt 迁移到 ksp。 将任何 Dagger SPI 插件迁移到新的 Dagger SPI 插件 API。 确保没有 Kapt 处理器生成需要与 Dagger 交互的类。 需要注意的是，Dagger 的 KSP 处理器仍处于 alpha 阶段，官方目前主要关注的是确保正确性而不是优化性能，在使用的过程中有任何问题都可及时向官方反馈","title":"Kotlin 技术月报 | 2023 年 9 月"},{"content":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kotlin 路线图更新 Kotlin 路线图更新了！今年还有哪些亮点值得期待？\n带有稳定版 K2 编译器的 Kotlin 2.0 即将面世！ Kotlin Multiplatform 将在今年迈入稳定！ Kotlin/Wasm 计划将提升至 alpha，并可适用于独立的 Wasm 虚拟机 新的基础库 kotlinx-io 正在开发中 Android 调试体验改进，调试内联类与内联函数将更加容易 Kotlin 跨平台的缩写正式更改为 KMP Update on the Name of Kotlin Multiplatform\n为了解决过去两年里困扰许多 Kotlin 开发者的命名不一致和缩写混淆问题，Jetbrains 决定弃用“Kotlin多平台移动”（KMM）产品名称。从现在开始，当提及 Kotlin 用于跨不同平台共享代码的技术时，首选术语是“Kotlin多平台”（KMP），无论所讨论的目标平台组合是什么。\nKotlinConf 2024 门票现已开售 KotlinConf 2024 门票现已开售！| 官方博客\n第五届 KotlinConf 将于 2024 年 5 月 22 日至 24 日在丹麦哥本哈根贝拉中心（Bella Center）举行，届时，Kotlin 社区成员将再度齐聚一堂！\nKotlinConf’24 将举办为期一天的工作坊，随后是连续两天的内容和社交活动，包括会议、展览和其他趣味活动。 赶快预订门票，安排旅行，准备参加规模最大的 Kotlin 活动。\nCompose 1.5.0 发布 What’s new in the Jetpack Compose August ’23 release\n在 Jetpack Compose 功能上基本完备之后，Compose 团队开接下来的主要目标是提升性能，Compose 1.5.0 在性能上带来了以下提升\n新的 Modifier API 性能大幅提升，最高可减少 80% 的 composition 耗时 减少了部分 Compose API 的内存占用，同时修复了 ComposeView 的内存泄漏问题 Text 组件迁移到了新的 Modifier API，平均减少了 22% 的首次 composition 耗时 Kotlin 1.9.10 发布 https://github.com/JetBrains/kotlin/releases\nKotlin 1.9.10 版本已发布，此版本修复了 1.9.0 版本中出现的一些 bug，因此，那些希望升级至 Kotlin 1.9.0 版本的用户可以放心升级了。\n精选博客 Kotlin 和 Swift 的前世一定是兄弟 Swift 这门编程语言主要用于 iOS 和 MacOS 的开发，很多人都说 Kotlin 与 Swift 两者非常相像\n本文主要从声明变量和常量，导包，基本运算符，逻辑分支，循环语句，函数，高阶函数和闭包，创建对象，类继承等角度分析比较了 Kotlin 与 Swift 的异同\n2023 年了，都有哪些公司使用了 KMP？ Popular apps using Kotlin Multiplatform (KMP) in 2023 — and what you can learn from them\n在比较跨平台技术时，看看知名 APP 使用了什么技术栈以及我们可以从他们的实践中学到什么是非常重要的。\n目前 KMP 已经发布了 beta 版本，本文介绍了 KMP在 Cash, Netflix, Vmare, McDonald’s, 百度，虾皮，快手等知名 App 中的应用情况，以及他们分享的相关实践案例\n5 个提升 Kotlin 代码可读性与可维护性的小技巧 5 Kotlin Tips for a Cleaner Codebase\n本文主要介绍了 5 个提升 Kotlin 代码可读性与可维护性的小技巧\n优先考虑使用 internal，以将类的可见性限制为仅在当前模块内部。 将顶级函数的数量保持在最低限度，并注意其可见性，以避免滥用。 优先考虑可读性而不是少写几行代码 优先考虑创建专用数据类而不是使用 Pair 或 Triple 优先考虑使用详尽的 when 语句，因为使用 else 分支可能会导致错误 K2 编译器速度测试 A glimpse of K2 in nowinandroid\nK2 是 新的 Kotlin编译器前端，预计将在 Kotlin 2.0 发布正式版本。本文对比了在 nowinandroid 项目使用 K2 编译器前后的编译速度对比。\n总得来说，k2 已经到来，并且未来可期，目前 KAPT/KSP 仍然会回退到旧的编译器前端，一旦它们兼容 K2，我们可以期望有更好的结果\nCompose 1.5 发布，性能大幅提升？ 不久前 Compose 1.5.0 稳定版发布，在组合的性能方面得到明显改善，这主要归功于对 Modifier API 的持续重构，本文介绍了这背后的原理以及如何将自定义 Modifier 迁移到新系统。\n总得来说，为了解决老版本 Modifier 的性能问题, Compose 引入 Modifier.Node，带来了以下收益：\n更少的分配：生成的 Element 的数量大大降低，避免了内存抖动和内存占用。 更轻量的树：状态存在 Node 上，不再依靠 remember {} 存储，Composition 的节点数也随之减少，树的遍历速度也更快了。 更快的重组：Modifier.Node 为重组提供可比较标的物， 非必要不重新生成 Node，重组性能得到提升。 精选视频 关于 Kotlin 编译的一些常见误解 绝大多数开发者都中招了\n本视频主要介绍了一些 Kotlin 编译相关的常见误解：\nKotlin 代码是用 Javac 编译的吗？ Gradle Kotlin 版本与项目 Kotlin 版本的关系 Kotlin 与 Java 代码混合时是怎么编译的？依赖关系问题怎么解决？ 为什么 Kotlin 反编译后成了 Java 源码? Kotlin 新版的 K2 编译器是什么? 最后打个广告，霍老师的新书《深入实践 Kotlin 元编程》已上架\n手把手带你开发一个 Compose 跨平台项目 Build an iOS \u0026amp; Android app in 100% Kotlin with Compose Multiplatform\nCompose Multiplatform 对 iOS 的支持意味着我们可以完全使用 Kotlin 来构建跨平台移动应用程序：包括业务逻辑与 UI 层。\nCompose Multiplatform for iOS 目前处于 Alpha 阶段，因此此时正是探索该技术的好时机。如下图所示，本视频手把手地带你从头到尾使用 Kotlin 构建一个简单的鸟类图片查看 APP。\n在此过程中，您将了解如何通过 Compose 跨平台和 Kotlin 跨平台实现网络请求、序列化、业务逻辑及 UI 层等各方面功能的共享。最终，我们将构建一个精简的 APP，可以从 API 加载并展示各种鸟类图片，同时支持 Android 和 iOS 平台。\nKotlin 多平台的未来 Keynote: kotlin and the multiplatform future\n虽然 Kotlin 最初是在 JVM 上开始的，并随后在 Android 社区得到了应用，但它已经发展成为一个支持多平台的语言。本视频介绍了 Kotlin 多平台的故事以及它的未来。\n","permalink":"https://beijing-kug.github.io/news/kotlin-news-2023-08/","summary":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kotlin 路线图更新 Kotlin 路线图更新了！今年还有哪些亮点值得期待？\n带有稳定版 K2 编译器的 Kotlin 2.0 即将面世！ Kotlin Multiplatform 将在今年迈入稳定！ Kotlin/Wasm 计划将提升至 alpha，并可适用于独立的 Wasm 虚拟机 新的基础库 kotlinx-io 正在开发中 Android 调试体验改进，调试内联类与内联函数将更加容易 Kotlin 跨平台的缩写正式更改为 KMP Update on the Name of Kotlin Multiplatform\n为了解决过去两年里困扰许多 Kotlin 开发者的命名不一致和缩写混淆问题，Jetbrains 决定弃用“Kotlin多平台移动”（KMM）产品名称。从现在开始，当提及 Kotlin 用于跨不同平台共享代码的技术时，首选术语是“Kotlin多平台”（KMP），无论所讨论的目标平台组合是什么。\nKotlinConf 2024 门票现已开售 KotlinConf 2024 门票现已开售！| 官方博客\n第五届 KotlinConf 将于 2024 年 5 月 22 日至 24 日在丹麦哥本哈根贝拉中心（Bella Center）举行，届时，Kotlin 社区成员将再度齐聚一堂！\nKotlinConf’24 将举办为期一天的工作坊，随后是连续两天的内容和社交活动，包括会议、展览和其他趣味活动。 赶快预订门票，安排旅行，准备参加规模最大的 Kotlin 活动。","title":"Kotlin 技术月报 | 2023 年 8 月"},{"content":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kotlin 1.9.0 版本发布 Kotlin 1.9.0 现已发布 | 官方博客：Kotlin 1.9.0 版本已发布，其中最大的变化应该是 K2 编译器终于支持了 KAPT 编译器插件，主要包括以下内容：\n持续完善 Kotlin K2 编译器，包括对 KAPT 的支持，Gradle 构建报告更好的支持等 一些语言特性：在枚举类中推荐使用entries属性代替values()方法进行遍历，data object 现已稳定，Value Class 支持次级构造函数 1.7.20 版本引入的..\u0026lt;操作符成为稳定 API 提供了一个用于根据名称获取正则表达式capture group的新 API 提供了一个新的扩展函数createParentDirectories，可用于创建带有必要父目录的新文件，如果目录已存在，则不操作，否则创建目录 Kotlin 跨平台 Gradle 插件支持配置缓存 Google 的 Android 团队将提供自己的 Gradle 插件来支持 Kotlin Multiplatform 中的 Android Target Kotlin/Native 在访问 object 单例的 const val 字段时将不再初始化 object Kotlin/Native在链接过程中遇到无符号问题时，默认处理方式已更改为警告而非报错，这样更接近于Kotlin/JVM的处理方式，即在运行时报错 Kotlin/Wasm 在包体积方面做了巨大的优化，以一个 HelloWorld 项目为例，1.9.0 版本相较于 1.8.20 版本，其体积缩小了10倍。 也可以查看视频版本的介绍：Kotlin 1.9 更新了什么？\nKotlin Notebook IDEA 插件已发布 Introducing Kotlin Notebook\nKotlin 版本的 Jupyter Notebook，与代码编辑器不同的是，Notebook是一种交互式工具，可以让你在一个文档中整合代码、可视化和文本。在Notebook中，你可以编写和运行代码片段，查看结果，并在一个地方记录你的思考过程。Notebook在快速原型设计、分析和数据科学等领域都有着广泛的应用，\nKotlin Notebook 插件为 IntelliJ IDEA 带来了交互式开发体验，现已推出首个实验版本。本文介绍了该插件所支持的功能及其使用示例。\nRedwood 发布 beta 版本 Redwood 发布 beta 版本\nRedwood 是 Cash 公司开源的 Compose 跨平台框架，类似 Compose 版 RN，通过组件映射的方式实现跨平台，同时也支持通过与 Zipline 结合实现动态更新\nRedwood 目前已发布了 0.50 版本，这个版本标志着Redwood进入 beta 阶段，相较于之前提供了更多的稳定性保证。\n从现在开始，直至 1.0 版本（不包括 1.0 版本）发布之前，Redwood 都将在协议和服务上与旧版本保持兼容。由于 Redwood 提供了动态更新功能，这也意味着在使用 Redwood 0.5 版本的 Treehouse host 中，可以无缝支持使用 Redwood 0.6 及以后版本编译和部署的 Treehouse client 代码。\n精选博客 设计图转Compose代码，Relay帮你轻松搞定 简单来说，Relay 可以与 Figma 集成，直接把设计稿生成 Compose 代码。\n设计人员使用 Relay for Figma 插件为界面组件添加注解并进行打包，包括布局、样式、动态内容和交互行为的相关信息，以便于开发者使用。\n开发者使用 Relay for Android Studio 插件导入界面软件包，并生成 Jetpack Compose 代码。\nAndroid 开发人员很大一部分的时间花费在了实现 UI 细节上，如果能实现全自动甚至是半自动的desgin to code，都将极大地提升开发效率。总的来说，这项技术具有巨大的应用价值。\nKotlin 新特性预览之 data object 数据单例 1.8.20版本中引入的 data object 数据单例在1.9.0版本中已经变得稳定。本文主要介绍了以下内容：\ndata object 与 object 的区别 data object 与 sealed class 更适配 data object 与 data class 的区别 Gson与Kotlin\u0026quot;摩擦\u0026quot;的那件小事 使用 Gson 进行序列化时，如果序列化类没有无参构造函数，会导致属性的默认初始值丢失等问题。本文介绍了 Gson 反序列化非静态内部类时的坑，同时介绍了一种代替复杂的TypeToken写法的新方式\n@OptIn(ExperimentalStdlibApi::class) fun main(args: Array\u0026lt;String\u0026gt;) { val content = \u0026#34;[{\u0026#34;content\u0026#34;: 10, \u0026#34;location\u0026#34;: \u0026#34;aa\u0026#34;}, {\u0026#34;content\u0026#34;: 10, \u0026#34;location\u0026#34;: \u0026#34;bb\u0026#34;}]\u0026#34; val obj = Gson().fromJson\u0026lt;List\u0026lt;OutClass\u0026gt;\u0026gt;(content, typeOf\u0026lt;List\u0026lt;OutClass\u0026gt;\u0026gt;().javaType) println(obj) } 总的来说，Gson 与 Kotlin 的适配并不是很好，因此如果使用 Kotlin 的话，还是更推荐迁移到 Moshi 或者 kotlin-serialization。\nCompose 为什么可以跨平台？ 本文是 2022 Kotlin 中文开发者大会相关分享的文字版，深入介绍了 Compose 支持跨平台的底层原理\n我们知道，Compose 框架具有良好的分层结构，其中 Compose Compiler 层与 Compose Runtime 层负责驱动一棵节点树的更新，这部分与平台无关，节点树也可以是任意类型的节点树甚至是一棵渲染无关的树。\n而不同平台的渲染机制不同，所以 Compose UI 与平台相关，因此 Compose 要实现跨平台要解决的唯一问题就是 Compose UI 层的跨平台\nCompose 跨平台技术发展十分迅速，截止目前已经出现了两种实现 Compose UI 层跨平台的方案，令人充满期待\ncompose-multiplatform：Jetbrains 目前正在开发的 Compose 跨平台框架，类似于 flutter，通过封装 skia 引擎，解决 Compose UI 层的跨平台问题 redwood：Cash 公司开源的类 React Native 方案，通过组件映射的方式实现 UI 层的跨平台，同时也支持动态化更新组件 Compose 组件的 API 官方指南 API Guidelines for @Composable components in Jetpack Compose\n最近官方更新了 Compose 组件 API 指南，这些指南介绍了使用 Jetpack Compose 开发 UI 组件的最佳实践，遵循这些指南可以给我们带来以下收益\n长期可扩展：遵循最佳实践的组件 API 可以降低变更成本，减少变更对使用者的影响 与其他组件保持一致：不同的组件都遵循相同的指南，使用者可以使用现有的知识和模式来处理由不同作者创建的新组件，降低接入新组件的成本 减少错误：封装良好的组件会鼓励使用者写出符合最佳实践的代码，并在可能的情况下禁止错误的用法。 匿名内部类/Lambda Java和Kotlin谁会导致内存泄漏? 本文从字节码的角度分析了为什么 Java 匿名内部类会导致内存泄漏，同时分析比较了 Java 的 Lambda 表达式，Kotlin 匿名内部类，Lambda 表达式和高阶函数，以评估它们是否会引发类似的内存泄漏问题\nJetpack Compose也能搞插件化了 在传统的 View 体系中，插件化框架的其实很大一部分工作就是处理未注册 Activity 的问题。在进入 Jetpack Compose 的世界以后，Activity 的角色被淡化了，由于一个 Composable 组件就可以承担一个屏幕级的显示，因此我们的应用中不再需要那么多的 Activity 类，只要你喜欢，你甚至可以打造一个单 Activity 的纯 Compose 应用。\n因此 Compose 实际上降低了插件化的成本，本文主要探索了几种可以在 Jetpack Compose 中实施插件化/动态加载的可行性方案\nActivity 占坑方式访问插件中的 Composable 组件(传递不同参数，展示不同的 Composable) 直接加载插件中的 Composable 组件(返回 Compose 组件) 套娃模式加载 Composable 组件(返回 ComposeView) 精选视频 为什么 Kotlin 排名比 Swift 落后？ 它居然说 Java 不行了？！！\n本视频分析了为什么 Kotlin 的使用明显比 Swift 更加广泛，但是在 TIOBE 等编程语言排名中，Swift 的排名却远高于 Kotlin。其原因在于 TIOBE 是通过搜索结果数来统计语言排名的，Swift 这个词汇具有多重含义，包括人名、国际结算系统等，而 Kotlin 则起源于圣彼得堡附近的一座默默无闻的小岛：Kotlin Island。\n相比之下，通过分析 Github 上的代码仓库来统计语言活跃度的 GitHut 排名或许更加准确\nKotlin 跨平台从入门到实战 Kotlin Multiplatform from \u0026ldquo;hello world\u0026rdquo; to the real world\nKotlin 跨平台目前已经进入 beta 阶段。到现在，您肯定已经听说过 Kotlin 多平台技术，并可能尝试在 demo 中体验过它。但当您真正尝试将 Kotlin 跨平台技术应用于实际项目时，您可能会遇到一些微妙且复杂的问题，比如 Kotlin 与 Swift 的互操作性、模块化、管理具有相互依赖关系的多个代码库，以及优化构建时间和二进制文件大小等。本视频的分享者来自 touchlab，介绍了他们在这些方面的一些实践经验。\n社区活动 深圳、武汉、贵州 KUG 联合线上分享会 社区活动 | 7 月 23 日，深圳、武汉、贵州 KUG 联合线上分享会等你参加！\n深圳、武汉、贵州 KUG 组织的联合线上分享会，主要包括以下内容\n《JWT 与 Ktor 的故事》分享 《Compose-Fluent-UI》分享 《Compose 状态管理与 Compose 快照》分享 加入 Kotlin 用户组 KUG 是让 Kotlin 开发者和爱好者们聚在一起的技术社区。通过基于群聊的日常交流或不定期在线上/线下举办的技术讲座和沙龙，促进大家的知识分享和技能提升。\n截至目前，国内已有 16 个 KUG 成立，各个 KUG 的信息和加入方式可见链接：找到组织！国内 Kotlin User Group 信息整理（23年7月）\n","permalink":"https://beijing-kug.github.io/news/kotlin-news-2023-07/","summary":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kotlin 1.9.0 版本发布 Kotlin 1.9.0 现已发布 | 官方博客：Kotlin 1.9.0 版本已发布，其中最大的变化应该是 K2 编译器终于支持了 KAPT 编译器插件，主要包括以下内容：\n持续完善 Kotlin K2 编译器，包括对 KAPT 的支持，Gradle 构建报告更好的支持等 一些语言特性：在枚举类中推荐使用entries属性代替values()方法进行遍历，data object 现已稳定，Value Class 支持次级构造函数 1.7.20 版本引入的..\u0026lt;操作符成为稳定 API 提供了一个用于根据名称获取正则表达式capture group的新 API 提供了一个新的扩展函数createParentDirectories，可用于创建带有必要父目录的新文件，如果目录已存在，则不操作，否则创建目录 Kotlin 跨平台 Gradle 插件支持配置缓存 Google 的 Android 团队将提供自己的 Gradle 插件来支持 Kotlin Multiplatform 中的 Android Target Kotlin/Native 在访问 object 单例的 const val 字段时将不再初始化 object Kotlin/Native在链接过程中遇到无符号问题时，默认处理方式已更改为警告而非报错，这样更接近于Kotlin/JVM的处理方式，即在运行时报错 Kotlin/Wasm 在包体积方面做了巨大的优化，以一个 HelloWorld 项目为例，1.9.0 版本相较于 1.8.20 版本，其体积缩小了10倍。 也可以查看视频版本的介绍：Kotlin 1.","title":"Kotlin 技术月报 | 2023 年 7 月"},{"content":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kotlin 1.9.0-RC 版本发布 What\u0026rsquo;s new in Kotlin 1.9.0-RC：Kotlin 1.9.0-RC 版本已发布，主要包括以下内容\n持续完善 Kotlin K2 编译器，添加了对 Kotlin/Native 后端的支持 在枚举类中推荐使用entries属性代替values()方法进行遍历 1.7.20 版本引入的..\u0026lt;操作符成为稳定 API 提供了一个用于根据名称获取正则表达式capture group的新 API 提供了一个新的扩展函数createParentDirectories，可用于创建带有必要父目录的新文件，如果目录已存在，则不操作，否则创建目录 Kotlin 跨平台 Gradle 插件支持配置缓存 Google 的 Android 团队将提供自己的 Gradle 插件来支持 Kotlin Multiplatform 中的 Android Target Kotlin/Native 在访问 object 单例的 const val 字段时将不再初始化 object 精选博客 Kotlin 中的函数式编程：探索 Monad 及其实际用例 Kotlin 是一门从一开始就支持函数式编程的语言，而 Monad 是函数式编程中的一个重要概念，本文主要介绍了 Monad 是什么，在 Kotlin 函数式编程中如何使用它们，以及一些 Monad 的实际应用案例。\nMonad 的概念看起来有些难以理解， 关于 Monad 到底是什么也可以参考灰蓝天际大佬翻译的： Kotlin 版图解 Functor、Applicative 与 Monad\n使用 ParallelGC 加快 Kotlin 编译速度，并减少内存占用 JDK 17: Using ParallelGC for the Kotlin process in Android Builds\n我们知道 Kotlin 编译过程中守护进程会占据大量的内存，这其中不可避免的会发生 GC，因此不同的垃圾回收策略也会影响 Kotlin 编译速度\n本文分别使用 G1 垃圾回收器与并行垃圾回收器编译 nowinandroid 项目，对比数据如下：\nKotlin 编译任务耗时减少了22% Kotlin 进程的垃圾回收器耗时减少了60% Kotlin进程内存使用量减少了51% 当然不同项目的测试结果可能不同，数据仅供参考。不过 Android 文档中的优化构建速度指南也推荐我们使用并发垃圾回收器，因此感兴趣的同学也可以尝试下，看看与本文的测试数据是否一致\nKotlin 编译器介绍 Crash Course on the Kotlin Compiler | K1 + K2 Frontends, Backends\n本文介绍了 Kotlin 编译的总体流程，包括 K1 和 K2 两个编译器前端的异同特点，以及编译器前端产物是如何通过 JVM、JS、Native 和 WASM 四个编译器后端，来生成相应的目标产物的。\n同时我们知道 K2 编译器前端比起 k1 编译器前端在性能上有了很大的提升，本文也介绍了 K1 编译器前端的主要性能问题在于非常糟糕的代码局部性和内存局部性。所有的descriptors都是惰性的，因此编译器总是在不同部分的代码之间跳转，从而破坏了 JIT 优化的数量。此外，解析的所有信息都存储在一个大的 Map（BindingContext）中，因此 CPU 不能充分缓存对象。\n从Kotlin中return@forEach了个寂寞 本文探讨了 Kotlin forEach 中一个容易出错的细节，在 Kotlin 语言中，return@forEach 的作用类似于 continue 而不是 break。文章解释了其背后的原理，并提供了一个相应的解决方案。\n(1..7).forEach { if (it == 3) { return@forEach // 相当于 continue 而不是 break } Log.d(\u0026#34;xys\u0026#34;, \u0026#34;Num: $it\u0026#34;) } 如何使用 Kotlin 技术栈构建一个播客网站 《Kotlin 炉边漫谈》是一个讨论 Kotlin 相关资讯的中文播客，播客网站现已上线：Kotlin 炉边漫谈官方网站\n该网站使用 Kotlin 技术栈构建，包括前端展示，后端云函数接口，数据爬虫获取与播放数据图表分析等功能。目前前端部分仍然是由 js 框架构建，后续在 Kotlin/WASM 成熟后或许可以弥补这一缺憾。同时后续也将推出 Kotlin 跨平台移动端 app，敬请期待。\n这个例子是 Kotlin 端到端解决方案的一个很好的示范，详情可见：how I make a podcast website using serverless technology in 2023\nKotlin 动态化框架 Zipline Dynamic Kotlin with Zipline\nZipline 是 Cash 公司开源的一款 Kotlin 动态化框架，借助这个框架，我们可以使用 Kotlin 编写功能和业务逻辑，并将它们动态推送给用户，免去了对应用发版的依赖。\nZipline 基于 Kotlin 跨平台构建，目前 1.0 版本是通过 Kotlin/Js 后端将 Kotlin 代码编译成 Js 代码，Js 代码发送到端上后通过 QuickJs 引擎执行。需要注意的是，编译成 Js 代码仅是 Zipline 内部的一个实现细节，因此在后续的迭代中可以方便地替换，在 Zipline 2.0 中将会切换到 WebAssembly。\nZipline 不仅可以动态更新业务逻辑，通过与 Compose 跨平台框架 Redwood 结合，也可以实现动态更新 UI，详情可见 Jake Wharton 大神在 KotlinConf 上的分享： Playing in the Treehouse with Redwood and Zipline\nRedwood + Zipline = Treehouse = \u0026ldquo;支持动态化的 Compose 跨平台方案\u0026rdquo;。这套方案解决了 Kotlin UI 跨平台及动态化两个关键问题，具有很大的想象空间和应用潜力。\n精选视频 Compose 跨平台快速上手 Build Your First Compose Multiplatform App (KMM)\nPhilipp Lackner 是一位在 YouTube 上非常活跃的讲师，主要分享 Kotlin 与 Android 相关的教程。在此视频中，他详细介绍了如何逐步创建一个 Compose 跨平台项目，实现在 Android 和 iOS 平台上共享 UI。\nKotlin 编译成 WebAssembly Kotlin goes WebAssembly!\nKotlin 1.8.20 引入了新的编译后端：WebAssembly，Kotlin 代码通过编译成 WebAssembly ，可以运行在浏览器，Node.js 等环境中。本视频主要介绍了 Wasm 是什么，Kotlin Wasm 的现状与示例，以及其在未来的展望\nCompose 渲染机制介绍 Compose 渲染机制的秘密\n这是由上海 Kotlin 用户组组织者带来的一场精彩分享。在本视频中，您将了解到 Jetpack Compose 是如何在屏幕上绘制的，同时还会介绍 Skia 引擎与 OpenGL ES、Vulkan 等图形 API 之间的关系以及 Compose-Multiplatform 在各个平台上的渲染方式。\n","permalink":"https://beijing-kug.github.io/news/kotlin-news-2023-06/","summary":"为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频以及社区活动等方面的信息。\n最新动态 Kotlin 1.9.0-RC 版本发布 What\u0026rsquo;s new in Kotlin 1.9.0-RC：Kotlin 1.9.0-RC 版本已发布，主要包括以下内容\n持续完善 Kotlin K2 编译器，添加了对 Kotlin/Native 后端的支持 在枚举类中推荐使用entries属性代替values()方法进行遍历 1.7.20 版本引入的..\u0026lt;操作符成为稳定 API 提供了一个用于根据名称获取正则表达式capture group的新 API 提供了一个新的扩展函数createParentDirectories，可用于创建带有必要父目录的新文件，如果目录已存在，则不操作，否则创建目录 Kotlin 跨平台 Gradle 插件支持配置缓存 Google 的 Android 团队将提供自己的 Gradle 插件来支持 Kotlin Multiplatform 中的 Android Target Kotlin/Native 在访问 object 单例的 const val 字段时将不再初始化 object 精选博客 Kotlin 中的函数式编程：探索 Monad 及其实际用例 Kotlin 是一门从一开始就支持函数式编程的语言，而 Monad 是函数式编程中的一个重要概念，本文主要介绍了 Monad 是什么，在 Kotlin 函数式编程中如何使用它们，以及一些 Monad 的实际应用案例。\nMonad 的概念看起来有些难以理解， 关于 Monad 到底是什么也可以参考灰蓝天际大佬翻译的： Kotlin 版图解 Functor、Applicative 与 Monad","title":"Kotlin 技术月报 | 2023 年 6 月"},{"content":"最近举办的 KotlinConf 与 Google I/O 上都有不少 Kotlin 技术的分享，同时最近一个月各地的 Kotlin 组织也举办了不少活动\n为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频，社区活动等\n最新动态 KotlinConf 2023 回放来了 KotlinConf 2023 的所有回放已出，所有回放列表可见：https://kotlinconf.com/talks/\n本次大会除了开场与闭幕讨论，共有 69 场分享，可以说是一场盛宴了，我整理统计了一下各个分享的主题\n主题 分享数 Kotlin 跨平台 21 Compose 相关分享 10 Kotlin 在服务端的应用 9 Kotlin 协程相关分享 8 Kotlin 编译器与编译器插件 8 Kotlin 与测试 4 Kotlin 语言特性相关分享 4 Kotlin 与函数式编程 3 Kotlin 用于数据科学 2 Kotlin 与游戏 2 Kotlin 与 Gradle 1 Kotlin 与 AI 1 从各个主题的分享数量也可以看出 Kotlin 在各个方向的火热程度\nKotlin 跨平台相关分享是最多的，可以看出这也是 Kotlin 团队下一步要重点发展的方向 越来越多的人开始使用 Compose ，据统计，在 top 1000 的 Android 应用中，有 21% 的应用使用了 Jetpack Compose 虽然据统计大约 66% 的 Kotlin 开发者是 Android 开发者，但服务端开发者使用 Kotlin 的比例也在逐渐上升，这应该也是 Kotlin 团队想要发力的方向 这次大会 Kotlin 编译器与编译器插件相关的分享也比较多，应该是因为 K2 编译器的逐渐成熟，即将发布 beta 版本 国外很多团队重视代码测试，而不仅仅是需求开发，因此 Kotlin 在测试方面的分享也较多 Google I/O : Android 版 Kotlin 的新动态 What\u0026rsquo;s new in Kotlin for Android：在本次 Google I/O 大会上，介绍了今年将为 Android 开发者发布的 Kotlin 更新，主要包括\n即将推出的 K2 编译器 KTS 成为 Gradle 构建默认设置 Kotlin 符号处理 (Kotlin Symbol Processing) 的改进 Kotlin 跨平台的一些新动态 这其中我最关注的是 K2 编译器的新动态，K2 编译器最显著的改进是编译速度的大幅提升，同时稳定的编译器插件 API 也可以降低 Kotlin 编译器插件的开发成本\n在 Kotlin 1.8.20 中，已经可以通过设置languageVersion = \u0026quot;2.0\u0026quot;来开启 K2 了，而 K2 编译器也将在 Kotlin 1.9.x 中 Beta，并最终在 Kotlin 2.0 版本中稳定\nKotlin 1.9.0-Beta 发布 What\u0026rsquo;s new in Kotlin 1.9.0-Beta：Kotlin 1.9.0 Beta 版本终于发布，主要包括以下内容\n持续完善 Kotlin K2 编译器，添加了对 Kotlin/Native 后端的支持 1.7.20 版本引入的..\u0026lt;操作符成为稳定 API 提供了一个新的扩展函数createParentDirectories，可用于创建带有必要父目录的新文件，如果目录已存在，则不操作，否则创建目录 Kotlin 跨平台 Gradle 插件支持配置缓存 Google 的 Android 团队将提供自己的 Gradle 插件来支持 Kotlin Multiplatform 中的 Android Target Kotlin/Native 在访问object单例的const val字段时将不再初始化object Kotlin 协程 1.7.0 发布 https://github.com/Kotlin/kotlinx.coroutines/releases：在我看来，主要变动在于\n不再支持老版本的 Kotlin/Native 内存模型 Kotlin/Native 版协程终于添加了 Dispatchers.IO 支持 精选博客 Kotlin 成为 Gradle 默认语言！如何快速上手？KOGE 小册来帮忙！ 在使用 groovy 开发构建脚本时，大家肯定碰到过代码自动补全，类型检查等痛点问题，而使用 Kotlin DSL 开发脚本可以完美解决这些问题\n在本次 KotlinConf 上已经宣布，Kotlin DSL 现在成为新 Gradle 构建的默认设置。如果你想学习 Gradle，而苦于对 groovy 的语法并不熟悉，那么 KOGE 是你的好帮手\nKOGE 是 Kotlin-oriented Gradle Essentials 的缩写，顾名思义是面向 Kotlin 的 Gradle 基础手册。我们按照合理的先后顺序，列出新手最困惑的概念，再从一些互联网上已有的问题、源码、示例项目中去学习。它不是 “Awesome Gradle” 的项目收藏夹，而是一份大纲，一本简练的自学手册。 手册选择了 Kotlin 作为介绍 DSL 脚本和插件开发的语言，链接和用例以 Android 构建场景为主。\nKotlin 跨平台系列文章 Kotlin 跨平台系列文章，分享了 Kotlin 跨平台在各端的使用实践，包括以下内容：\nKMM跨平台开发入门，看这一篇就够了~ Compose跨平台第一弹：体验Compose for Desktop Compose跨平台第二弹：体验Compose for Web 一文先行体验使用Compose开发iOS～ Kotlin跨平台第四弹：了解Kotlin/Wasm 我开源了一个Compose跨平台项目模版 落地包体积监控，用Kotlin写一个APK差异分析CLI CLI 即 command-line interface (命令行界面)，我们在开发中常常会写一些 CLI 工具，本文即是一个使用 Kotlin 实现 APK 差异分析 CLI 的很好示例\n当然有人会问，开发 CLI 我为什么不使用 python 呢？使用 Kotlin 开发 CLI 的最大优势在于，如果你比较熟悉 Kotlin 的话，可以更快的实现功能，也可以写出更好的代码，而不是使用一个你可能不那么熟悉的语言。\n因此使用 Kotlin 开发 CLI 是在你已经掌握 Kotlin 之后提供的一个选项，大家可根据自己的情况选用\nKotlin Unit 与 Nothing 详解 Unit 为啥还能当函数参数？面向实用的 Kotlin Unit 详解 这玩意真的有用吗？对，是的！Kotlin 的 Nothing 详解 Kotlin 的 Unit 与 Nothing 类型，其实我们每天都在使用。我们知道，Unit 表示没有返回值，Nothing 则是所有类型的子类型，但是它们的本质是什么，又为什么这么设计呢？上面两篇文章就解答了这些问题，讲解的很细致，通俗易懂\n精选视频 Compose iOS 发布 alpha 版本 Compose Multiplatform on iOS by: Sebastian Aigner and Nikita Lipsky：KotlinConf 大会上关于 Compose iOS 的分享，非常精彩，主要包括以下内容：\nCompose Multiplatform for iOS Demo 现场演示，效果看起来已经很不错了 基于 Jetpack Compose 构建，与 Jetpack Compose 的 API 相同，因此可以快速将 Jetpack Compose 项目扩展成 Compose 跨平台项目 基于 Kotlin 跨平台构建，因此可以使用相同的机制访问平台特异的 API 允许与原生用户界面的双向互操作：可以在 Compose UI 中嵌入复杂的原生视图，例如MKMapView，或者在 SwiftUI 中嵌入 Compose 代码 介绍了 Compose Multiplatform for iOS 的架构与原理，以及其目前在功能与性能上待完善的部分 Kotlin 炉边漫谈第 8 期 《Kotlin 炉边漫谈》第 8 期：阿里和美团的 Kotlin Multiplatform 应用案例 | 播客\n由来自阿里巴巴的曹立成和美团的刘银龙两位嘉宾，跟大家一起分享 Kotlin Multiplatform 的落地实践经验\n横向对比了 Flutter, Kotlin Multiplatform, React Native, 以及国内大厂自研跨平台框架等的优缺点及应用场景，同时分享了在做技术选型时的经验分享，非常精彩，不容错过\nK2 编译器编译速度实测 Kotlin 新编译器 K2 到底有多快？：K2 编译器一直号称可以大幅提升编译速度，那么到底提升了多少？现在我们是否可以开始使用 K2 了呢？\n本视频实测了 K2 的编译提速效果，发现 K2 编译器并没有吹牛，测试结果如下图所示：\n社区活动 KotlinConf Global KotlinConf Global 是 KotlinConf 在全球各个城市的拓展延伸活动，促进各地 Kotlin 开发人员之间的联系，最近全国各个城市也举办了相关活动\n上海线下活动｜2023 KotlinConf Global Shanghai Meetup 期待与您见面 活动回顾 | 2023 KotlinConf Global 北京分享会 深圳 KotlinConf Global 2023 西安线下活动｜2023 KotlinConf Global Xi’an Meetup 期待与您见面 新成立的 Kotlin User Group 最近全国各个城市也新创建了一些 KUG，欢迎各个城市的 Kotlin 爱好者加入\n贵州 Kotlin 用户组 郑州 Kotlin 用户组 ","permalink":"https://beijing-kug.github.io/news/kotlin-news-2023-05/","summary":"最近举办的 KotlinConf 与 Google I/O 上都有不少 Kotlin 技术的分享，同时最近一个月各地的 Kotlin 组织也举办了不少活动\n为了帮助社区的小伙伴们更好地了解 Kotlin 相关的最新动态，我们决定尝试使用月报的形式，整理展示最近一个月的 Kotlin 技术动态。\n月报的主要内容包括：整理展示最近一个月的最新技术动态，精选博客，精选视频，社区活动等\n最新动态 KotlinConf 2023 回放来了 KotlinConf 2023 的所有回放已出，所有回放列表可见：https://kotlinconf.com/talks/\n本次大会除了开场与闭幕讨论，共有 69 场分享，可以说是一场盛宴了，我整理统计了一下各个分享的主题\n主题 分享数 Kotlin 跨平台 21 Compose 相关分享 10 Kotlin 在服务端的应用 9 Kotlin 协程相关分享 8 Kotlin 编译器与编译器插件 8 Kotlin 与测试 4 Kotlin 语言特性相关分享 4 Kotlin 与函数式编程 3 Kotlin 用于数据科学 2 Kotlin 与游戏 2 Kotlin 与 Gradle 1 Kotlin 与 AI 1 从各个主题的分享数量也可以看出 Kotlin 在各个方向的火热程度\nKotlin 跨平台相关分享是最多的，可以看出这也是 Kotlin 团队下一步要重点发展的方向 越来越多的人开始使用 Compose ，据统计，在 top 1000 的 Android 应用中，有 21% 的应用使用了 Jetpack Compose 虽然据统计大约 66% 的 Kotlin 开发者是 Android 开发者，但服务端开发者使用 Kotlin 的比例也在逐渐上升，这应该也是 Kotlin 团队想要发力的方向 这次大会 Kotlin 编译器与编译器插件相关的分享也比较多，应该是因为 K2 编译器的逐渐成熟，即将发布 beta 版本 国外很多团队重视代码测试，而不仅仅是需求开发，因此 Kotlin 在测试方面的分享也较多 Google I/O : Android 版 Kotlin 的新动态 What\u0026rsquo;s new in Kotlin for Android：在本次 Google I/O 大会上，介绍了今年将为 Android 开发者发布的 Kotlin 更新，主要包括","title":"Kotlin 技术月报 | 2023 年 5 月"},{"content":"2023 KotlinConf Global 北京分享会结束了，感谢所有参与其中的讲师、参会者、工作人员。\n我们将讲师的演讲视频与讲义发布在 B 站与谷歌 drive ，方便大家回顾\n演讲回看 活动开场 你想知道的 Jetpack Compose 的编译器黑魔法 Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，它一经推出便受到了广大开发者的密切关注。Compose 的设计实现将 Kotlin 的 DSL 能力发挥到了极致，其中基于 Kotlin 编译器插件实现的编译时代码检查和变换发挥了巨大的作用。这次分享我们将对 Jetpack Compose 的编译器插件源码进行简要剖析，在了解 Compose 的工作机制的同时也能深入理解编译器插件的适用场景。\n《你想知道的 Jetpack Compose 的编译器黑魔法》 PPT 链接\nCompose 到底能玩出什么花？ Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，无独有偶，Jetbrains 也推出了新一代的声明式 UI 开发框架: “Compose”，没错，名称都一样，并且使用方式也基本一致。本次分享会带大家看一看 Jetbrains 的 Compose 有什么厉害之处，并且能为我们安卓开发工程师的竞争力带来哪些提升。\n《Compose 到底能玩出什么花？》 PPT 链接\nKMM 跨平台原理及实践 Jetbrains Compose 为什么可以跨平台？这离不开 Kotlin Multiplatform （KMP）技术，它是 Kotlin 官方提供的一套跨平台解决方案，通过编译器将 Kotlin 源码编译为各平台目标代码或机器码。本次分享主要介绍 KMP 跨平台原理，以及 Kotlin Multiplatform Mobile（KMM）在移动端的落地实践，并结合本次官方 KotlinConf 大会的最新进展探讨未来更广的发展前景。\n《KMM 跨平台原理及实践》PPT 链接\n精彩瞬间 ","permalink":"https://beijing-kug.github.io/events/kotlinconf-callback/","summary":"2023 KotlinConf Global 北京分享会结束了，感谢所有参与其中的讲师、参会者、工作人员。\n我们将讲师的演讲视频与讲义发布在 B 站与谷歌 drive ，方便大家回顾\n演讲回看 活动开场 你想知道的 Jetpack Compose 的编译器黑魔法 Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，它一经推出便受到了广大开发者的密切关注。Compose 的设计实现将 Kotlin 的 DSL 能力发挥到了极致，其中基于 Kotlin 编译器插件实现的编译时代码检查和变换发挥了巨大的作用。这次分享我们将对 Jetpack Compose 的编译器插件源码进行简要剖析，在了解 Compose 的工作机制的同时也能深入理解编译器插件的适用场景。\n《你想知道的 Jetpack Compose 的编译器黑魔法》 PPT 链接\nCompose 到底能玩出什么花？ Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，无独有偶，Jetbrains 也推出了新一代的声明式 UI 开发框架: “Compose”，没错，名称都一样，并且使用方式也基本一致。本次分享会带大家看一看 Jetbrains 的 Compose 有什么厉害之处，并且能为我们安卓开发工程师的竞争力带来哪些提升。\n《Compose 到底能玩出什么花？》 PPT 链接\nKMM 跨平台原理及实践 Jetbrains Compose 为什么可以跨平台？这离不开 Kotlin Multiplatform （KMP）技术，它是 Kotlin 官方提供的一套跨平台解决方案，通过编译器将 Kotlin 源码编译为各平台目标代码或机器码。本次分享主要介绍 KMP 跨平台原理，以及 Kotlin Multiplatform Mobile（KMM）在移动端的落地实践，并结合本次官方 KotlinConf 大会的最新进展探讨未来更广的发展前景。","title":"活动回顾 | 2023 KotlinConf Global 北京分享会"},{"content":"5月13日，北京 Kotlin 用户组将举办首次线下聚会，欢迎您的到来。\n这场活动是 KotlinConf Global 活动的一部分，我们邀请了三位嘉宾来分享他们在 Kotlin 元编程、Compose 跨平台以及 Kotlin Multiplatform 等方面的实践经验。\n大家可以在现场与各位 Kotlin 技术爱好者一起交流讨论，线下面基，点击报名链接或者扫描文末二维码即可报名\n活动简介 经过三年的疫情最困难时期，JetBrains 官方举办的 KotlinConf 大会于今年 4 月中旬在荷兰阿姆斯特丹再次回归。此次大会上，Kotlin 团队的开发人员介绍了 Kotlin 的未来发展方向和重要更新，同时来自世界各地的开发人员也分享了 Kotlin 在各个领域的先进实践经验。\n鉴于许多开发人员无法亲身参加现场活动，JetBrains 官方在全球范围内发起了 KotlinConf Global 活动，由 JetBrains 注册的 Kotlin User Group（KUG）在当地举办，旨在促进本地 Kotlin 开发人员之间的联系，提高技术水平。\n本次活动是 KotlinConf Global 活动的一部分，同时也是北京 Kotlin 用户组的首次线下活动，期待您的参加\n精彩内容 《你想知道的 Jetpack Compose 的编译器黑魔法》 讲师简介：霍丙乾 bennyhuo，Google 开发者专家（Kotlin 方向）；《深入理解 Kotlin 协程》 作者；先后就职于腾讯、猿辅导。\n内容简介：Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，它一经推出便受到了广大开发者的密切关注。Compose 的设计实现将 Kotlin 的 DSL 能力发挥到了极致，其中基于 Kotlin 编译器插件实现的编译时代码检查和变换发挥了巨大的作用。这次分享我们将对 Jetpack Compose 的编译器插件源码进行简要剖析，在了解 Compose 的工作机制的同时也能深入理解编译器插件的适用场景。\n《Compose 到底能玩出什么花？》 讲师简介：朱江，《Jetpack Compose：Android全新UI编程》作者；CSDN 博客专家、掘金优秀创作者；现在联想（北京）有限公司担任 Android 开发工程师。\n内容简介：正如霍丙乾大佬所说，Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架；无独有偶，Jetbrains 也推出了新一代的声明式 UI 开发框架: “Compose”，没错，名称都一样，并且使用方式也基本一致。本次分享会带大家看一看 Jetbrains 的 Compose 有什么厉害之处，并且能为我们安卓开发工程师的竞争力带来哪些提升。\n《KMM 跨平台原理及实践》 讲师简介：刘银龙，美团移动端开发工程师，GMTC 讲师。\n内容简介：Jetbrains Compose 为什么可以跨平台？这离不开 Kotlin Multiplatform （KMP）技术，它是 Kotlin 官方提供的一套跨平台解决方案，通过编译器将 Kotlin 源码编译为各平台目标代码或机器码。本次分享主要介绍 KMP 跨平台原理，以及 Kotlin Multiplatform Mobile（KMM）在移动端的落地实践，并结合本次官方 KotlinConf 大会的最新进展探讨未来更广的发展前景。\n时间地点 时间：2023 年 5 月 13 日，14:00 - 17:00 地点：北京市朝阳区望京SOHO T2C座（在 1 楼抵达即可，组织者会带领大家上去） 报名方式 我们非常欢迎您报名成为观众，并与我们一同聆听他人的分享、参与热烈的技术探讨。观众报名对我们而言非常重要，因为我们需要根据观众人数申请合适的活动场地、准备活动奖品，并采购零食和饮料等。因此如果您有意参加的话，请您填写下方的观众报名表。\n报名链接：2023 KotlinConf Global 北京分享会线下观众报名表\n扫码报名：\n组织者联系方式 如果您决定报名参加活动，请添加组织者的微信号，以便在活动当日前往正确的地点。如果您有任何疑问或需要帮助，请随时联系组织者：\n微信号：RicardoJiang2022 公众号：关注微信公众号“程序员江同学”，点击技术讨论 ","permalink":"https://beijing-kug.github.io/events/kotlinconf/","summary":"5月13日，北京 Kotlin 用户组将举办首次线下聚会，欢迎您的到来。\n这场活动是 KotlinConf Global 活动的一部分，我们邀请了三位嘉宾来分享他们在 Kotlin 元编程、Compose 跨平台以及 Kotlin Multiplatform 等方面的实践经验。\n大家可以在现场与各位 Kotlin 技术爱好者一起交流讨论，线下面基，点击报名链接或者扫描文末二维码即可报名\n活动简介 经过三年的疫情最困难时期，JetBrains 官方举办的 KotlinConf 大会于今年 4 月中旬在荷兰阿姆斯特丹再次回归。此次大会上，Kotlin 团队的开发人员介绍了 Kotlin 的未来发展方向和重要更新，同时来自世界各地的开发人员也分享了 Kotlin 在各个领域的先进实践经验。\n鉴于许多开发人员无法亲身参加现场活动，JetBrains 官方在全球范围内发起了 KotlinConf Global 活动，由 JetBrains 注册的 Kotlin User Group（KUG）在当地举办，旨在促进本地 Kotlin 开发人员之间的联系，提高技术水平。\n本次活动是 KotlinConf Global 活动的一部分，同时也是北京 Kotlin 用户组的首次线下活动，期待您的参加\n精彩内容 《你想知道的 Jetpack Compose 的编译器黑魔法》 讲师简介：霍丙乾 bennyhuo，Google 开发者专家（Kotlin 方向）；《深入理解 Kotlin 协程》 作者；先后就职于腾讯、猿辅导。\n内容简介：Jetpack Compose 是 Android 官方推出的新一代的声明式 UI 开发框架，它一经推出便受到了广大开发者的密切关注。Compose 的设计实现将 Kotlin 的 DSL 能力发挥到了极致，其中基于 Kotlin 编译器插件实现的编译时代码检查和变换发挥了巨大的作用。这次分享我们将对 Jetpack Compose 的编译器插件源码进行简要剖析，在了解 Compose 的工作机制的同时也能深入理解编译器插件的适用场景。","title":"线下活动 | 2023 KotlinConf Global 北京分享会"},{"content":"kotlin-android-extensions 框架已经过时了很久，并且将在 Kotlin 1.8 中被正式移除。\n对于新代码，我们可以使用 ViewBinding 等方式替换，但是大量存量代码的迁移，对于开发者来说不是一个轻松的工作。\n为此，看云控股技术团队开源了 Kace 框架, 帮助开发者实现 kotlin-android-extensions 插件的无缝迁移。\n开源地址：https://github.com/kanyun-inc/Kace\n","permalink":"https://beijing-kug.github.io/events/kace/","summary":"kotlin-android-extensions 框架已经过时了很久，并且将在 Kotlin 1.8 中被正式移除。\n对于新代码，我们可以使用 ViewBinding 等方式替换，但是大量存量代码的迁移，对于开发者来说不是一个轻松的工作。\n为此，看云控股技术团队开源了 Kace 框架, 帮助开发者实现 kotlin-android-extensions 插件的无缝迁移。\n开源地址：https://github.com/kanyun-inc/Kace","title":"KAE将被正式移除，如何无缝迁移？"},{"content":"Kotlin 协程 破解 Kotlin 协程专栏 Kotlin 协程视频教程 KMM (Kotlin Multiplatform Mobile) KMM 环境搭建及入门教程 KMM 视频分享教程 Kotlin 元编程 Kotlin 元编程GDG社区分享视频 Kotlin 注解处理器视频教程 别了 KAPT , 使用 KSP 快速实现 ButterKnife Kotlin 更新 Kotlin 1.5 有哪些新内容？ Kotlin 1.6 有哪些新内容？ Kotlin 1.7 有哪些新内容？ ","permalink":"https://beijing-kug.github.io/advanced/","summary":"Kotlin 协程 破解 Kotlin 协程专栏 Kotlin 协程视频教程 KMM (Kotlin Multiplatform Mobile) KMM 环境搭建及入门教程 KMM 视频分享教程 Kotlin 元编程 Kotlin 元编程GDG社区分享视频 Kotlin 注解处理器视频教程 别了 KAPT , 使用 KSP 快速实现 ButterKnife Kotlin 更新 Kotlin 1.5 有哪些新内容？ Kotlin 1.6 有哪些新内容？ Kotlin 1.7 有哪些新内容？ ","title":"Kotlin 进阶学习材料"},{"content":"","permalink":"https://beijing-kug.github.io/events/","summary":"events","title":"Events"},{"content":"","permalink":"https://beijing-kug.github.io/news/","summary":"news","title":"News"}]